ComponentBasedSystem {
	providedrole ("WebGUI.WebGUI_HTTP")
	assemblycontext {
		AssemblyContext WebGUI {
			component WebGUI
		},
		AssemblyContext PoolingAudioDB {
			component DigitalWatermarking
		},
		AssemblyContext MediaStore {
			component MediaStore
		}		
	}
	type {
		Void void
	}
	assemblyconnector {
		AssemblyConnector MediaStore {
			providedrole "MediaManager.MediaManager_MediaStore"
			requiredrole "WebGUI.WebGUI_MediaStore"
			providedAssemblyContext MediaManager
			requiredAssemblyContext WebGUI	
		},
		AssemblyConnector Sound {
			providedrole "DigitalWatermarking.DigitalWatermarking_Sound"
			requiredrole "MediaManager.MediaManager_Sound"
			providedAssemblyContext "MediaStore.DigitalWatermarking"
			requiredAssemblyContext "MediaStore.MediaManager"
		},
		AssemblyConnector AudioDB1 {
			providedrole "DBCache.DBCache_AudioDB"
			requiredrole "MediaManager.MediaManager_AudioDB"
			providedAssemblyContext "MediaStore.DBCache"
			requiredAssemblyContext "MediaStore.MediaManager"
		},
		AssemblyConnector AudioDB2 {
			providedrole "PoolingAudioDB.PoolingAudioDB_AudioDB"
			requiredrole "DBCache.DBCache_AudioDB"
			providedAssemblyContext PoolingAudioDB
			requiredAssemblyContext "MediaStore.DBCache"
		}
	}
	allocation Allocation {
		allocationcontext{
			AllocationContext {
				container "DatabaseServer"
				assemblycontext PoolingAudioDB
			},
			AllocationContext {
				container "ApplicationServer"
				assemblycontext WebGUI
			},
			AllocationContext {
				container ApplicationServer
				assemblycontext MediaStore
			}
		}
	}
	repository Repository {
		interface {
			Interface HTTP{
				signature {
					Signature HTTPDownload {
						returntype void				
					},
					Signature HTTPUpload {
						returntype void
					}				
				}
			},
			Interface Sound {
				signature {
					Signature watermark {
						returntype void
					}
				}
			},
			Interface AudioDB {
				signature {
					Signature queryDB {
						returntype void
					},
					Signature addFile {
						returntype void
					}
				}
			},
			Interface MediaStore {
				signature{
					Signature download {
						returntype void
					},
					Signature upload {
						returntype void
					}
				}		
			}		
		}
		component {
			Component WebGUI {
				service{
					Service{
						correspondingSignatures("HTTP.HTTPDownload")
					},
					Service{
						correspondingSignatures("HTTP.HTTPUpload")
					}	
				}
				requiredrole {
					RequiredRole WebGUI_MediaStore {
						interface MediaStore
					}
				}
				providedrole {
					ProvidedRole  WebGUI_HTTP {
						interface HTTP
					}
				}
			},
			Component PoolingAudioDB {
				service{
					Service{
						correspondingSignatures("AudioDB.queryDB")
					},
					Service{
						correspondingSignatures("AudioDB.addFile")
					}	
				}
				providedrole {
					ProvidedRole PoolingAudioDB_AudioDB {
						interface AudioDB
					}
				}
			},
			Component MediaManager {
				service{
					Service{
						correspondingSignatures("MediaStore.upload")
					},
					Service{
						correspondingSignatures("MediaStore.download")
					}	
				}
				requiredrole {
					RequiredRole MediaManager_Sound {
						interface Sound
					},
					RequiredRole MediaManager_AudioDB {
						interface AudioDB
					}
				}
				providedrole {
					ProvidedRole MediaManager_MediaStore {
						interface MediaStore
					}
				}
			},
			Component DigitalWatermarking {
				service{
					Service{
						correspondingSignatures("Sound.watermark")
					}
				}
				providedrole {
					ProvidedRole DigitalWatermarking_Sound {
						interface Sound
					}
				}
			},
			Component DBCache {
				service{
					Service{
						correspondingSignatures("AudioDB.queryDB")
					},
					Service{
						correspondingSignatures("AudioDB.addFile")
					}	
				}
				requiredrole {
					RequiredRole DBCache_AudioDB {
						interface AudioDB
					}
				}
				providedrole {
					ProvidedRole DBCache_AudioDB {
						interface AudioDB
					}
				}		
			},
			CompositeComponent MediaStore {
				service { 
					Service { 
						correspondingSignatures("MediaStore.download")
					},
					Service {
						correspondingSignatures("MediaStore.upload")
					}
				}
				requiredrole { 
					RequiredRole MediaStore_AudioDB {
						interface AudioDB
					}
				}
				providedrole {
					ProvidedRole MediaStore_MediaStore {
						interface MediaStore				
					}
				}
				assemblycontext {
					AssemblyContext MediaManager {
						component MediaManager
					},
					AssemblyContext DBCache {
						component DBCache						
					},
					AssemblyContext DigitalWatermarking {
						component DigitalWatermarking
					}			
				}
				delegationconnector {
					DelegationConnector MediaStore_Provided {
						role ("MediaStore_MediaStore", "MediaManager.MediaManager_MediaStore")
					},
					DelegationConnector MediaStore_Required {
						role ("DBCache.DBCache_AudioDB", "MediaStore_AudioDB")
					}
				}
			}
		}
	}
	environment Environment {
		container {
			Container ApplicationServer,
			Container DatabaseServer	
		}
		link {
			Link applicationToDatabase{
				container(ApplicationServer, DatabaseServer)
			}
		}
	} 
}