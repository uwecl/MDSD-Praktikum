module edu.kit.ipd.sdq.mdsdpc.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
       scanClassPath = true
       platformUri = rootPath
       registerGenModelFile = "platform:/resource/ComponentBasedSystem/model/ComponentBasedSystem.genmodel"
   	}
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "edu.kit.ipd.sdq.mdsdpc.ComponentBasedSystem.mydsl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "edu.kit.ipd.sdq.mdsdpc.mydsl.MyDsl"
			fileExtensions = "mydsl"
//			/Users/benjaminrupp/Documents/KIT/Praktika/MDSD/MDSD-Praktikum/eclipse/ComponentBasedSystem/model/ComponentBasedSystem.genmodel
//			platform:/resource/ComponentBasedSystem/model/ComponentBasedSystem.genmodel
			referencedResource = "platform:/resource/ComponentBasedSystem/model/ComponentBasedSystem.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
			}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
