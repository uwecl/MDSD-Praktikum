// automatically generated by Xtext
grammar edu.kit.ipd.sdq.mdsdpc.system.System with org.eclipse.xtext.common.Terminals

import "platform:/resource/ComponentBasedSystem/model/componentBasedSystem.ecore" as componentBasedSystem
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/ComponentBasedSystem/model/componentBasedSystem.ecore#//dataTypes" as dataTypes
import "platform:/resource/ComponentBasedSystem/model/componentBasedSystem.ecore#//roles"
import "platform:/resource/ComponentBasedSystem/model/componentBasedSystem.ecore#//behaviourDescription" as behaviourDescription

ComponentBasedSystem returns componentBasedSystem::ComponentBasedSystem:
	'ComponentBasedSystem'
	'{'
		'providedrole' '(' providedrole+=[ProvidedRole|EString] ( "," providedrole+=[ProvidedRole|EString])* ')' 
		('requiredrole' '(' requiredrole+=[RequiredRole|EString] ( "," requiredrole+=[RequiredRole|EString])* ')' )?
		('assemblycontext' '{' assemblycontext+=AssemblyContext ( "," assemblycontext+=AssemblyContext)* '}' )?
		('type' '{' type+=Type ( "," type+=Type)* '}' )?
		('assemblyconnector' '{' assemblyconnector+=AssemblyConnector ( "," assemblyconnector+=AssemblyConnector)* '}' )?
		'allocation' allocation=Allocation
		'repository' repository=Repository
		'environment' environment=Environment
	'}';


Type returns dataTypes::Type:
	Type_Impl | Simple | Complex | ParameterType_Impl | Void | ReturnType_Impl;







Component returns componentBasedSystem::Component:
	Component_Impl | CompositeComponent;







DescriptionElement returns behaviourDescription::DescriptionElement:
	DescriptionElement_Impl | InternalAction | ExternalCall | Loop | Branch;




ReturnType returns dataTypes::ReturnType:
	ReturnType_Impl | Simple | Complex | Void;

ParameterType returns dataTypes::ParameterType:
	ParameterType_Impl | Simple | Complex;


Role returns Role:
	Role_Impl | RequiredRole | ProvidedRole;

AssemblyContext returns componentBasedSystem::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'component' component=[componentBasedSystem::Component|EString]
	'}';

Type_Impl returns dataTypes::Type:
	{dataTypes::Type}
	'Type'
	name=EString;

AssemblyConnector returns AssemblyConnector:
	'AssemblyConnector'
	name=EString
	'{'
		'providedrole' providedrole=[ProvidedRole|EString]
		'requiredrole' requiredrole=[RequiredRole|EString]
		'providedAssemblyContext' providedAssemblyContext=[componentBasedSystem::AssemblyContext|EString]
		'requiredAssemblyContext' requiredAssemblyContext=[componentBasedSystem::AssemblyContext|EString]
	'}';

Allocation returns componentBasedSystem::Allocation:
	'Allocation'
	'{'
		'allocationcontext' '{' allocationcontext+=AllocationContext ( "," allocationcontext+=AllocationContext)* '}' 
	'}';

Repository returns componentBasedSystem::Repository:
	{componentBasedSystem::Repository}
	'Repository'
	'{'
		('interface' '{' interface+=Interface ( "," interface+=Interface)* '}' )?
		('component' '{' component+=Component ( "," component+=Component)* '}' )?
	'}';

Environment returns componentBasedSystem::Environment:
	{componentBasedSystem::Environment}
	'Environment'
	'{'
		('container' '{' container+=Container ( "," container+=Container)* '}' )?
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
	'}';

ProvidedRole returns ProvidedRole:
	'ProvidedRole'
	name=EString
	'{'
		'interface' interface=[componentBasedSystem::Interface|EString]
	'}';

RequiredRole returns RequiredRole:
	'RequiredRole'
	name=EString
	'{'
		'interface' interface=[componentBasedSystem::Interface|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Component_Impl returns componentBasedSystem::Component:
	'Component'
	name=EString
	'{'
		('behaviourdescription' '{' behaviourdescription+=BehaviourDescription ( "," behaviourdescription+=BehaviourDescription)* '}' )?
		'service' '{' service+=Service ( "," service+=Service)* '}' 
		('requiredrole' '{' requiredrole+=RequiredRole ( "," requiredrole+=RequiredRole)* '}' )?
		'providedrole' '{' providedrole+=ProvidedRole ( "," providedrole+=ProvidedRole)* '}' 
	'}';

BehaviourDescription returns behaviourDescription::BehaviourDescription:
	{behaviourDescription::BehaviourDescription}
	'BehaviourDescription'
	'{'
		('descriptionelement' '{' descriptionelement+=DescriptionElement ( "," descriptionelement+=DescriptionElement)* '}' )?
	'}';

Service returns componentBasedSystem::Service:
	'Service'
	'{'
		'correspondingSignatures' '(' correspondingSignatures+=[componentBasedSystem::Signature|EString] ( "," correspondingSignatures+=[componentBasedSystem::Signature|EString])* ')' 
	'}';

CompositeComponent returns componentBasedSystem::CompositeComponent:
	'CompositeComponent'
	name=EString
	'{'
		('behaviourdescription' '{' behaviourdescription+=BehaviourDescription ( "," behaviourdescription+=BehaviourDescription)* '}' )?
		'service' '{' service+=Service ( "," service+=Service)* '}' 
		('requiredrole' '{' requiredrole+=RequiredRole ( "," requiredrole+=RequiredRole)* '}' )?
		'providedrole' '{' providedrole+=ProvidedRole ( "," providedrole+=ProvidedRole)* '}' 
		'assemblycontext' '{' assemblycontext+=AssemblyContext ( "," assemblycontext+=AssemblyContext)* '}' 
		'delegationconnector' '{' delegationconnector+=DelegationConnector ( "," delegationconnector+=DelegationConnector)* '}' 
	'}';

DescriptionElement_Impl returns behaviourDescription::DescriptionElement:
	{behaviourDescription::DescriptionElement}
	'DescriptionElement'
	;

InternalAction returns behaviourDescription::InternalAction:
	{behaviourDescription::InternalAction}
	'InternalAction'
	;

ExternalCall returns behaviourDescription::ExternalCall:
	{behaviourDescription::ExternalCall}
	'ExternalCall'
	;

Loop returns behaviourDescription::Loop:
	{behaviourDescription::Loop}
	'Loop'
	'{'
		('descriptionelement' '{' descriptionelement+=DescriptionElement ( "," descriptionelement+=DescriptionElement)* '}' )?
	'}';

Branch returns behaviourDescription::Branch:
	{behaviourDescription::Branch}
	'Branch'
	'{'
		('descriptionelement' '{' descriptionelement+=DescriptionElement ( "," descriptionelement+=DescriptionElement)* '}' )?
	'}';

Signature returns componentBasedSystem::Signature:
	'Signature'
	name=EString
	'{'
		'returntype' returntype=[dataTypes::ReturnType|EString]
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

Parameter returns componentBasedSystem::Parameter:
	'Parameter'
	name=EString
	'{'
		'parametertype' parametertype=[dataTypes::ParameterType|EString]
	'}';

ReturnType_Impl returns dataTypes::ReturnType:
	{dataTypes::ReturnType}
	'ReturnType'
	name=EString;

ParameterType_Impl returns dataTypes::ParameterType:
	{dataTypes::ParameterType}
	'ParameterType'
	name=EString;

Simple returns dataTypes::Simple:
	{dataTypes::Simple}
	'Simple'
	name=EString
	'{'
		('kind' kind=simpleTypes)?
	'}';

Complex returns dataTypes::Complex:
	'Complex'
	name=EString
	'{'
		'simple' '{' simple+=Simple ( "," simple+=Simple)* '}' 
	'}';

enum simpleTypes returns dataTypes::simpleTypes:
				int = 'int' | boolean = 'boolean' | char = 'char' | date = 'date' | double = 'double' | float = 'float' | list = 'list' | long = 'long' | map = 'map' | string = 'string';

Void returns dataTypes::Void:
	{dataTypes::Void}
	'Void'
	name=EString;

DelegationConnector returns componentBasedSystem::DelegationConnector:
	'DelegationConnector'
	name=EString
	'{'
		'role' '(' role+=[Role|EString] ( "," role+=[Role|EString])* ')' 
	'}';

Role_Impl returns Role:
	'Role'
	name=EString
	'{'
		'interface' interface=[componentBasedSystem::Interface|EString]
	'}';

Interface returns componentBasedSystem::Interface:
	{componentBasedSystem::Interface}
	'Interface'
	name=EString
	'{'
		('signature' '{' signature+=Signature ( "," signature+=Signature)* '}' )?
	'}';

AllocationContext returns componentBasedSystem::AllocationContext:
	'AllocationContext'
	'{'
		'container' container=[componentBasedSystem::Container|EString]
		'assemblycontext' assemblycontext=[componentBasedSystem::AssemblyContext|EString]
	'}';

Container returns componentBasedSystem::Container:
	{componentBasedSystem::Container}
	'Container'
	name=EString;

Link returns componentBasedSystem::Link:
	'Link'
	name=EString
	'{'
		'container' '(' container+=[componentBasedSystem::Container|EString] ( "," container+=[componentBasedSystem::Container|EString])* ')' 
	'}';
